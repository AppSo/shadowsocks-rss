最近SSR弄了一个新协议auth_chain_a，很多人还不知道这个是什么鬼，这里我来简单介绍一下。

介绍分为两部分，给普通用户的介绍，及给开发者的介绍。多数人只要关注第一部分的介绍就好了。

首先，是给普通用户的介绍，因为这个协议和auth_aes128_md5（auth_aes128_sha1被代表了）有点像，我们就直接用这个协议做对比。不同点有：

1 统计客户端数量是实时的。这意味着如果服务端限制为只能1个客户端使用，那么你只要把A客户端关闭，B客户端就可以立即连上，而auth_aes128_md5协议需要等待3分钟。

2 UDP部分也带了长度混淆。避免了经常使用UDP查询DNS时，数据包大小高度集中的问题。但缺点是导致UDP转发效率降低。

3 协议自身就会在数据部分做RC4加密。不同用户不同的连接使用的加密密钥都不一样，所以可以安全地使用none不需要额外的加密。 而在auth_aes128_md5里面，使用单端口多用户时都是使用公共的加密方式，会导致如果有人要刻意捕捉数据，那么是可以用公共的密钥解密的（但之后还依然需要去猜测每个数据包里有效数据的起始位置，因为偏移量是用用户自己的KEY加密的，所以即使不加密很多人用auth_aes128_md5也是用得好好的）。而在auth_chain_a协议里，为什么叫做chain呢，因为后一块数据的处理是依赖它上一块的哈希信息，每块数据里的中间是加密过的有效数据，两边是混淆数据，其长度基于上一块数据的哈希信息的计算。于是尽管使用的加密算法是RC4，但安全性也比RC4本身要高（因为最终会依赖于破解AES-128以及MD5来确定有效数据的位置）。具体见第二部分。

其它优点：这个设计用于预防恶意客户端。例如如果在auth_aes128_md5协议下，如果有人刻意修改客户端实现，让混淆用的随机长度固定为一个常数，这样会导致很容易被统计分析，而部分不明真相的用户使用了修改过的客户端，这给这些用户带来了风险。而在auth_chain_a下，这个长度是协议算法决定的，没法修改。另外一点就是这个协议的实现为低延时设计，使用TCP时往往会得到比其它协议有稍低的延迟，基于TCP的游戏下表现理论上会稍好。但大流量下载时CPU占用可能会比其它协议稍高。

但这个协议的缺点也明显，主要是两点，第一是不能自己改加密方式，不过这点亦可算作优点吧，避免选择困难，乖乖用none就好了。第二是UDP效率问题，不过如果只是查询DNS那肯定没有问题的。要是打游戏或者P2P之类的，有可能会遇到速度瓶颈，遇到的话你就切换为auth_aes128_md5甚至origin玩吧（但要是说速度远远不及其它协议那是不可能的），因为这个协议主要在TCP上花了功夫，UDP的问题还没解决好，而且我也说过这个是实验性的协议。

面向普通用户的介绍就到这里。接下来是面向开发者的介绍，说明文档：
https://github.com/AppSo/shadowsocks-rss/blob/master/doc/auth_chain_a.md

好了，面向开发者的介绍就说明到这里了（滑稽），有什么疑问就留言吧。

作者 twitter @breakwa11
